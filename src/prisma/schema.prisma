// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?     @unique
  emailVerified DateTime?   @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  communities   Community[] @relation(fields: [communityIds], references: [id])
  communityIds  String[]    @db.ObjectId
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  medias        Media[]
  ratings       Rating[]
  Like          Like[]
  Comment       Comment[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum MediaType {
  tv
  movie
}

model Media {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  tmdbId        String
  imdbId        String?
  dateWatched   DateTime? @map("date_watched")
  mediaType     MediaType @map("media_type")
  title         String
  posterPath    String?   @map("poster_path")
  backdropPath  String?   @map("backdrop_path")
  rating        Float     @default(0)
  watched       Boolean   @default(false)
  community     Community @relation(fields: [communityId], references: [id])
  communityId   String    @db.ObjectId
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  genres        String[]  @default([])
  requestedBy   User?     @relation(fields: [requestedById], references: [id])
  requestedById String?   @map("requested_by_id") @db.ObjectId
  queue         Int?
  ratings       Rating[]
  comments      Comment[]

  @@unique([tmdbId, communityId])
  @@map("medias")
}

model Community {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  name              String   @unique
  inviteCode        String   @unique @map("invite_code")
  description       String?
  medias            Media[]
  members           User[]   @relation(fields: [memberIds], references: [id])
  memberIds         String[] @db.ObjectId
  createdBy         String   @map("created_by") @db.ObjectId
  slug              String   @unique
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  currentlyWatching String?  @db.ObjectId

  @@map("communities")
}

model Rating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  media     Media    @relation(fields: [mediaId], references: [id])
  mediaId   String   @db.ObjectId
  value     Float
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, mediaId])
  @@map("ratings")
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  media     Media     @relation(fields: [mediaId], references: [id])
  mediaId   String    @db.ObjectId
  text      String
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @db.ObjectId
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  parent    Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children  Comment[] @relation("ParentChild")
  parentId  String?   @db.ObjectId
  likes     Like[]

  @@unique([userId, id])
  @@map("comments")
}

model Like {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId    String  @db.ObjectId
  commentId String  @db.ObjectId

  @@unique([userId, commentId])
  @@map("likes")
}

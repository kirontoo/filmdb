// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?     @unique
  emailVerified DateTime?   @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  communities   Community[] @relation(fields: [communityIds], references: [id])
  communityIds   String[]     @db.ObjectId

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Media {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  tmdbId      String
  dateWatched DateTime   @map("date_watched")
  media_type  String
  rating      Float      @default(0)
  watched     Boolean
  community   Community? @relation(fields: [communityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  communityId String?    @db.ObjectId

  @@map("medias")
}

model Community {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  inviteCode  String   @unique @map("invite_code")
  description String?
  medias      Media[]
  members     User[]   @relation(fields: [memberIds], references: [id])
  memberIds   String[] @db.ObjectId
  createdBy   String   @map("created_by") @db.ObjectId
  slug        String

  @@map("communities")
}
